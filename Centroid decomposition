#include <vector>
#include <queue>
#include <deque>
#include <cmath>
#include <algorithm>
#include <string>
#include <climits>
#include <iomanip>
#include <set>
#include <map>
#include <math.h>
#include <stack>
#include <list>

//#include <fstream>
#include <iostream>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

//ifstream cin("input.txt"); ofstream cout("output.txt"); 

struct wb {
	ll w = 0, b = 0;

	void add(wb a) {
		this->w += a.w;
		this->b += a.b;
	}

	wb mul(wb a) {
		return { this->w * a.w, this->b * a.b };
	}

	wb sub(wb a) {
		return { this->w - a.w, this->b - a.b };
	}
};
struct cd {
	int c, d, e;
};
struct xp {
	wb x, p;
};

int n;
vector <vector <int> > g;
vector <vector <wb> > dist;
vector <vector <vector <wb> > > eachDist;
vector <xp> distl;
vector <vector <xp> > eDistl;
vector <int> w;
vector <bool> del, color;
vector <vector <cd> > cent_up;

int find_weight(int v, int p = -1) {
	int weight = 1;
	for (int i = 0; i < g[v].size(); i++) {
		if (g[v][i] == p || del[g[v][i]])
			continue;
		weight += find_weight(g[v][i], v);
	}
	w[v] = weight;
	return weight;
}

void find_deep(int root, int root2, int v, int p, int deep = 1) {
	if (dist[root].size() <= deep)
		dist[root].push_back(wb());
	if (eachDist[root][root2].size() <= deep)
		eachDist[root][root2].push_back(wb());
	dist[root][deep].b++;
	eachDist[root][root2][deep].b++;
	for (int i = 0; i < g[v].size(); i++) {
		if (g[v][i] == p || del[g[v][i]])
			continue;
		cent_up[g[v][i]].push_back({ root, deep + 1, root2 });
		find_deep(root, root2, g[v][i], v, deep + 1);
	}
}

int find_centroid(int v, int s) {
	bool t = false;
	int p = -1;
	 while (!t) {
		 t = true;
		 for (int i = 0; i < g[v].size(); i++) {
			 int to = g[v][i];
			 if (to == p || del[to])
				 continue;
			 if (w[to] > s) {
				 t = false;
				 p = v;
				 v = to;
				 break;
			 }
		 }
	 }
	 return v;
}

void find_all_centroids(int v = 0, int p = -1) {
	find_weight(v);
	v = find_centroid(v, w[v] / 2);
	dist[v].push_back({ 0, 1 });
	del[v] = true;
	eachDist[v].resize(g[v].size());
	eDistl[v].resize(g[v].size());
	for (int i = 0; i < g[v].size(); i++) {
		int to = g[v][i];
		if (del[to])
			continue;
		cent_up[to].push_back({ v, 1, i });
		eachDist[v][i].push_back({ 0, 0 });
		find_deep(v, i, to, v);
		for (int j = 0; j < eachDist[v][i].size(); j++) {
			eDistl[v][i].x.b += eachDist[v][i][j].b;
			eDistl[v][i].p.b += eachDist[v][i][j].b*j;
		}
		eachDist[v][i].clear();
		find_all_centroids(to, v);
	}
	eachDist[v].clear();
	for (int j = 0; j < dist[v].size(); j++) {
		distl[v].x.b += dist[v][j].b;
		distl[v].p.b += dist[v][j].b*j;
	}
	dist[v].clear();
}

void change(int v) {
	wb ch = { 1, -1 };
	if (color[v] == 1)
		ch = { -1, 1 };
	color[v] = !color[v];
	distl[v].x.add(ch);
	for (int i = 0; i < cent_up[v].size(); i++) {
		cd d = cent_up[v][i];
		eDistl[d.c][d.e].x.add(ch);
		eDistl[d.c][d.e].p.add(ch.mul({ d.d, d.d }));
		distl[d.c].x.add(ch);
		distl[d.c].p.add(ch.mul({ d.d, d.d }));
	}
}

ll calc(int v) {
	wb cl = { 0, 1 };
	wb res = distl[v].p;
	if (color[v] == 1)
		cl = { 1, 0 };
	for (int i = 0; i < cent_up[v].size(); i++) {
		cd d = cent_up[v][i];
		res.add(distl[d.c].p.sub(eDistl[d.c][d.e].p));
		res.add(distl[d.c].x.sub(eDistl[d.c][d.e].x).mul({ d.d, d.d }));
	}
	return color[v] == 0 ? res.b : res.w;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int q;
	cin >> n >> q;
	g.resize(n);
	w.resize(n);
	cent_up.resize(n);
	dist.resize(n);
	distl.resize(n);
	eDistl.resize(n);
	eachDist.resize(n);
	del.resize(n, false);
	color.resize(n, 0);
	for (int i = 1; i < n; i++) {
		int v, u;
		cin >> v >> u;
		--v, --u;
		g[v].push_back(u);
		g[u].push_back(v);
	}
	find_all_centroids();
	while (q--) {
		int c;
		cin >> c;
		if (c == 1) {
			int v;
			cin >> v;
			change(--v);
		}
		else {
			int v;
			cin >> v;
			cout << calc(--v) << "\n";
		}
	}
	return 0;
}
