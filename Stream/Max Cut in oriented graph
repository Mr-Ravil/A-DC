#include <vector>
#include <queue>
#include <deque>
#include <cmath>
#include <algorithm>
#include <string>
#include <climits>
#include <iomanip>
#include <set>
#include <map>
#include <math.h>
#include <stack>
#include <list>

//#include <fstream>
#include <iostream>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

//ifstream cin("input.txt"); ofstream cout("output.txt");

struct edge {
	int from, to;
	int f, c;
	edge * back = nullptr;

	void increase_stream(int fi) {
		this->f += fi;
		this->back->f -= fi;
	}

	bool stream_is_max() {
		return this->f == this->c;
	}

	int free_stream() {
		return c - f;
	}

	edge(int from, int to, int f, int c) : from(from), to(to), f(f), c(c) {}

	edge(int from, int to, int f, int c, edge * back) : from(from), to(to), f(f), c(c), back(back) {}
};

struct origin_edge {
	bool orig;
	int num;
	edge * e = nullptr;

	origin_edge(bool orig, edge * e) : orig(orig), e(e) {}

	origin_edge(bool orig, int num, edge * e) : orig(orig), num(num), e(e) {}
};

int n, m;
vector<edge*> edges;
vector <vector<origin_edge>> g;

int find_max_stream(int s, int t) {
	int max_stream = 0;
	while (true) {
		vector <int> d(n, INT_MAX);
		vector <pair<edge*, int> > path(n, { nullptr, INT_MAX });
		priority_queue <pair<int, int> > q;
		d[s] = 0;
		q.push({ 0, s });
		bool end = false;
		while (!q.empty() && !end) {
			int v = q.top().second;
			int di = -q.top().first;
			q.pop();
			for (origin_edge oe : g[v]) {
				int to = oe.e->to;
				if (!oe.e->stream_is_max() && d[to] > di+1) {
					d[to] = di + 1;
					path[to] = { oe.e, min(path[v].second, oe.e->free_stream()) };
					if (to == t) {
						end = true;
						break;
					}
					q.push({ -di - 1, to });
				}
			}
		}
		if (path[t].first == nullptr)
			break;
		int i = t;
		int stream = path[t].second;
		max_stream += stream;
		while (path[i].first != nullptr) {
			path[i].first->increase_stream(stream);
			i = path[i].first->from;
		}
	}
	return max_stream;
}

vector <bool> tagged;

void tag(int v) {
	tagged[v] = true;
	for (origin_edge oe : g[v]) {
		if (!oe.e->stream_is_max() && !tagged[oe.e->to])
			tag(oe.e->to);
	}
}

void find_max_cut(int s, int t) {
	int max_stream = find_max_stream(s, t);
	tagged.resize(n, false);
	tag(s);
	vector <int> cut;
	for (int i = 0; i < n; i++) {
		if (!tagged[i])
			continue;
		for (origin_edge oe : g[i]) {
			if (!oe.orig || tagged[oe.e->to])
				continue;
			cut.push_back(oe.num);
		}
	}
	sort(cut.begin(), cut.end());
	cout << cut.size() << " " << max_stream << "\n";
	for (int i : cut)
		cout << i << " ";
}


int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> n >> m;
	g.resize(n);
	for (int i = 0; i < m; ++i) {
		int v, u, c;
		cin >> v >> u >> c;
		--v, --u;

		edges.push_back(new edge(v, u, 0, c));
		g[v].push_back(origin_edge(true, i + 1, edges.back()));
		edges.push_back(new edge(u, v, 0, 0, edges.back()));
		g[v].back().e->back = edges.back();
		g[v].push_back(origin_edge(false, edges.back()));

		swap(v, u);
		edges.push_back(new edge(v, u, 0, c));
		g[v].push_back(origin_edge(true, i + 1, edges.back()));
		edges.push_back(new edge(u, v, 0, 0, edges.back()));
		g[v].back().e->back = edges.back();
		g[v].push_back(origin_edge(false, edges.back()));
	}
	find_max_cut(0, n - 1);
	return 0;
}
