#pragma once

#include <string>
#include <vector>
#include <algorithm>

class suffix_array {
private:
	std::vector <int> suf_arr;
	std::vector <int> lcp;

	struct lr {//structure for sorting
		int n; //number
		int l; //left
		int r; //right

		bool operator<(const lr& a) const { //for comparator 
			return l < a.l;
		}

		bool operator!=(const lr& a) const {
			return l != a.l && r != a.r;
		}
	};

public:


	suffix_array(std::string & data) {
		int n = data.size() + 1;
		std::vector <lr> c(n);
		c[0] = { 0, 0, 0 };
		std::vector <std::pair <char, int> > s(n);
		for (int i = 0; i < n - 1; i++) 
			s[i] = { data[i], i };
		s[n - 1] = { 0, n - 1 };
		std::sort(s.begin(), s.end());
		for (int i = 1, k = 0; i < n; i++) {
			if (s[i].first != s[i - 1].first)
				k++;
			c[i].r = k;
			c[i].n = s[i].second;
		}
		s.clear();
		for (int i = 0; i < n; i++) 
			c[i].l = c[i - 1 >= 0 ? i - 1 : i - 1 + n].r;
		
		int degree = 1;
		while (true) {
			std::stable_sort(c.begin(), c.end());
			std::vector <int> c_bet(n);

			int k = 0;
			c_bet[0] = 0;
			for (int i = 1; i < n; i++) {
				if (c[i] != c[i - 1])
					k++;
				c_bet[i] = k;
			}

			if (k == n - 1) //suffix array is sorted
				break;

			degree *= 2;
			for (int i = 0; i < n; i++) {
				int j = i - degree >= 0 ? i - degree : i + degree;
				c[i].n = j;
				c[i].l = c_bet[i];
				c[i].r = c_bet[j];
			}
		}

		for (int i = 0; i < n; i++) 
			suf_arr[i] = c[i].n;

	}
	
};
