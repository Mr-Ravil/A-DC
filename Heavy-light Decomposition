#include <vector>
#include <queue>
#include <deque>
#include <cmath>
#include <algorithm>
#include <string>
#include <climits>
#include <iomanip>
#include <set>
#include <map>
#include <math.h>
#include <stack>
#include <list>

#include <fstream>
//#include <iostream>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

//ifstream cin("input.txt"); ofstream cout("output.txt"); 
ifstream cin("minonpath.in"); ofstream cout("minonpath.out"); 

struct tph {
	int t, p;
};

vector <vector <int> > g;
vector <vector <int> > p;
vector <int> par, d, w, cost;
vector <tph> id;
vector <vector<int> > t;
vector <int> tree_up;
vector <int> pritree;

int find_par_to_LCA(int v = 0, int dis = 0) {
	par.push_back(v);
	int h = 1;
	d[v] = dis++;
	while (h < par.size())
		p[v].push_back(par[par.size() - h - 1]), h <<= 1;
	int weight = 1, to = -1, maxw = -1;
	for (int i = 0; i < g[v].size(); i++) {
		int we = find_par(g[v][i], dis);
		weight += we;
		if (we > maxw)
			maxw = we, to = g[v][i];
	}
	par.pop_back();
	w[v] = to;
	return weight;
}

int LCA(int v, int u) {
	if (d[v] > d[u])
		swap(v, u);
	int k = p[u].size() - 1;
	while (d[v] < d[u]) {
		while (k > 0 && d[v] > d[p[u][k]])
			k--;
		u = p[u][k];
		k = min((int)p[u].size() - 1, k);
	}
	k = p[v].size() - 1;
	while (v != u) {
		while (k > 0 && p[v][k] == p[u][k])
			k--;
		v = p[v][k];
		u = p[u][k];
		k = min((int)p[v].size() - 1, k);
	}
	return v;
}

void build_tree(int root, int v, int l, int r) {
	if (l == r)
		t[root][v] = pritree[l];
	else {
		int m = (l + r) / 2;
		build_tree(root, v * 2 + 1, l, m);
		build_tree(root, v * 2 + 2, m + 1, r);
		t[root][v] = min(t[root][v * 2 + 1], t[root][v * 2 + 2]);
	}
}

void build(int v = 0, int from = -1) {
	int ts = t.size();
	t.push_back(vector <int>());
	tree_up.push_back(from);
	int u = v, l = 0;
	while (u != -1) {
		id[u] = { ts, l++ };
		pritree.push_back(cost[u]);
		u = w[u];
	}
	t[ts].resize(pritree.size() * 4);
	build_tree(ts, 0, 0, pritree.size() - 1);
	pritree.clear();
	while (v != -1) {
		for (int i = 0; i < g[v].size(); i++) {
			if (g[v][i] != w[v])
				build(g[v][i], v);
		}
		v = w[v];
	}
}

int get_min(int root, int v, int tl, int tr, int l, int r) {
	if (l > r)
		return INT_MAX;
	if (tl == l && tr == r)
		return t[root][v];
	int tm = (tl + tr) / 2;
	return min(get_min(root, v * 2 + 1, tl, tm, l, min(tm, r)), 
		get_min(root, v * 2 + 2, tm + 1, tr, max(tm + 1, l), r));
}

int find_min(int v, int u) {
	int pr = LCA(v, u);
	int minP = INT_MAX;
	while (id[pr].t != id[v].t) {
		minP = min(minP, get_min(id[v].t, 0, 0, t[id[v].t].size() / 4 - 1, 0, id[v].p));
		v = tree_up[id[v].t];
	}
	minP = min(minP, get_min(id[v].t, 0, 0, t[id[v].t].size() / 4 - 1, id[pr].p + 1, id[v].p));
	v = u;
	while (id[pr].t != id[v].t) {
		minP = min(minP, get_min(id[v].t, 0, 0, t[id[v].t].size() / 4 - 1, 0, id[v].p));
		v = tree_up[id[v].t];
	}
	minP = min(minP, get_min(id[v].t, 0, 0, t[id[v].t].size() / 4 - 1, id[pr].p + 1, id[v].p));
	return minP;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int n;
	cin >> n;
	g.resize(n);
	p.resize(n);
	d.resize(n);
	w.resize(n);
	id.resize(n);
	cost.resize(n);
	cost[0] = INT_MAX;
	for (int i = 1; i < n; i++) {
		int v, c;
		cin >> v >> c;
		v--;
		g[v].push_back(i);
		cost[i] = c;
	}
	find_par_to_LCA();
	build();
	int q;
	cin >> q;
	while (q--) {
		int v, u;
		cin >> v >> u;
		cout << find_min(--v, --u) << "\n";
	}
	return 0;
}
